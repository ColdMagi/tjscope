{"version":3,"file":"static/js/482.d462c21b.chunk.js","mappings":"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","sources":["components/atoms/BooleanText.tsx","components/scope/CommentCard.tsx","components/scope/EntryCard.tsx","components/scope/RatingView.tsx","contexts/Api.tsx","hooks/useFetch.ts","pages/Scope.tsx","utils/common.ts"],"sourcesContent":["function BooleanText({ value }: { value?: boolean }) {\n  return <>{value ? \"Да\" : \"Нет\"}</>;\n}\n\nexport default BooleanText;\n","import { Avatar, Heading, HStack, VStack, Text } from \"@chakra-ui/react\";\nimport { format } from \"date-fns\";\nimport { Osnova } from \"types/osnova\";\n\ninterface CommentCardProps {\n  comment: Osnova.Comment.Comment;\n}\n\nfunction CommentCard({\n  comment: {\n    author: { avatar_url, name },\n    date,\n    likes: { count, summ },\n    id,\n    entry: { url },\n    html,\n  },\n}: CommentCardProps) {\n  return (\n    <VStack\n      align={\"flex-start\"}\n      as=\"a\"\n      href={url + `?comment=${id}`}\n      rel=\"nofollow noopener noreferrer\"\n      target=\"_blank\"\n      p=\"3\"\n      shadow=\"md\"\n      borderWidth=\"1px\"\n      rounded=\"md\"\n      minW=\"100%\"\n      spacing={3}\n    >\n      <HStack justifyContent={\"space-between\"} minW=\"100%\">\n        <HStack>\n          <Avatar size=\"xs\" src={avatar_url} name={name} />\n          <Heading size=\"sm\">{name}</Heading>\n        </HStack>\n        <Text color=\"gray.400\" as=\"time\">\n          {format(date * 1000, \"dd.LL.yy\")}\n        </Text>\n      </HStack>\n      <VStack pl=\"8\">\n        <Text dangerouslySetInnerHTML={{ __html: html }} />\n      </VStack>\n      <HStack justifyContent=\"space-between\" minW=\"100%\">\n        <span />\n        <HStack>\n          <Text color=\"red.300\">{count - summ}</Text>\n          <Text color=\"green.300\">{summ}</Text>\n        </HStack>\n      </HStack>\n    </VStack>\n  );\n}\n\nexport default CommentCard;\n","import { Avatar, Heading, HStack, Image, Text, VStack } from \"@chakra-ui/react\";\nimport { format } from \"date-fns\";\nimport { Osnova } from \"types/osnova\";\n\ninterface EntryCardProps {\n  entry: Osnova.Entry.Entry;\n}\n\nfunction EntryCard({\n  entry: {\n    url,\n    hitsCount,\n    intro,\n    date,\n    likes: { count, summ },\n    cover,\n    subsite: { avatar_url, name },\n  },\n}: EntryCardProps) {\n  return (\n    <VStack\n      align={\"flex-start\"}\n      as=\"a\"\n      href={url}\n      rel=\"nofollow noopener noreferrer\"\n      target=\"_blank\"\n      p=\"3\"\n      shadow=\"md\"\n      borderWidth=\"1px\"\n      rounded=\"md\"\n      minW=\"100%\"\n      spacing={3}\n    >\n      <HStack justifyContent={\"space-between\"} minW=\"100%\">\n        <HStack>\n          <Avatar size=\"xs\" src={avatar_url} name={name} />\n          <Heading size=\"sm\">{name}</Heading>\n        </HStack>\n        <Text color=\"gray.400\" as=\"time\">\n          {format(date * 1000, \"dd.LL.yy\")}\n        </Text>\n      </HStack>\n      <VStack pl=\"8\">\n        <Text>{intro}</Text>\n        {cover && (\n          <Image\n            src={cover.thumbnailUrl}\n            alt=\"\"\n            objectFit={\"contain\"}\n            pointerEvents={\"none\"}\n          />\n        )}\n      </VStack>\n      <HStack justifyContent=\"space-between\" minW=\"100%\">\n        <Text pl=\"8\" color=\"gray.400\">\n          {hitsCount} просмотров\n        </Text>\n        <HStack>\n          <Text color=\"red.300\">{count - summ}</Text>\n          <Text color=\"green.300\">{summ}</Text>\n        </HStack>\n      </HStack>\n    </VStack>\n  );\n}\n\nexport default EntryCard;\n","import { Stat, StatLabel, StatNumber } from \"@chakra-ui/react\";\nimport { PropsWithChildren } from \"react\";\n\nfunction RatingView({\n  label = \"Рейтинг\",\n  children,\n}: PropsWithChildren<{ label?: string }>) {\n  return (\n    <Stat>\n      <StatLabel>{label}</StatLabel>\n      <StatNumber color=\"gray.500\">{children}</StatNumber>\n    </Stat>\n  );\n}\n\nexport default RatingView;\n","import { useContext } from \"react\";\nimport { createContext, PropsWithChildren } from \"react\";\n\nconst api = \"https://api.tjournal.ru/v2.31\";\nconst ApiContext = createContext(api);\nconst useApiContext = () => useContext(ApiContext);\n\nfunction ApiProvider({ children }: PropsWithChildren) {\n  return <ApiContext.Provider value={api}>{children}</ApiContext.Provider>;\n}\n\nexport { useApiContext };\nexport default ApiProvider;\n","import { useApiContext } from \"contexts/Api\";\nimport { useEffect, useReducer, useRef, useState } from \"react\";\n\ninterface State<T> {\n  data?: T;\n  error?: Error;\n}\n\ntype Cache<T> = { [url: string]: T };\n\n// discriminated union type\ntype Action<T> =\n  | { type: \"loading\" }\n  | { type: \"fetched\"; payload: T }\n  | { type: \"error\"; payload: Error };\n\n/**\n * Fetches data by provided url\n *\n * https://usehooks-ts.com/react-hook/use-fetch\n *\n * @param url url to request\n * @param options fetch request init (optional)\n * @returns state of loading with payload\n */\nfunction useFetch<T = unknown>(url?: string, options?: RequestInit): State<T> {\n  const cache = useRef<Cache<T>>({});\n\n  // Used to prevent state update if the component is unmounted\n  const cancelRequest = useRef<boolean>(false);\n\n  const initialState: State<T> = {\n    error: undefined,\n    data: undefined,\n  };\n\n  // Keep state logic separated\n  const fetchReducer = (state: State<T>, action: Action<T>): State<T> => {\n    switch (action.type) {\n      case \"loading\":\n        return { ...initialState };\n      case \"fetched\":\n        return { ...initialState, data: action.payload };\n      case \"error\":\n        return { ...initialState, error: action.payload };\n      default:\n        return state;\n    }\n  };\n\n  const [state, dispatch] = useReducer(fetchReducer, initialState);\n\n  useEffect(() => {\n    // Do nothing if the url is not given\n    if (!url) return;\n\n    cancelRequest.current = false;\n\n    const fetchData = async () => {\n      dispatch({ type: \"loading\" });\n\n      // If a cache exists for this url, return it\n      if (cache.current[url]) {\n        dispatch({ type: \"fetched\", payload: cache.current[url] });\n        return;\n      }\n\n      try {\n        const response = await fetch(url, options);\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n\n        const data = (await response.json()) as T;\n        cache.current[url] = data;\n        if (cancelRequest.current) return;\n\n        dispatch({ type: \"fetched\", payload: data });\n      } catch (error) {\n        if (cancelRequest.current) return;\n\n        dispatch({ type: \"error\", payload: error as Error });\n      }\n    };\n\n    void fetchData();\n\n    // Use the cleanup function for avoiding a possibly...\n    // ...state update after the component was unmounted\n    return () => {\n      cancelRequest.current = true;\n    };\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [url]);\n\n  return state;\n}\n\nfunction useApi<T = unknown>(\n  url?: string,\n  options?: RequestInit,\n  apiV = \"2.31\"\n): State<T> {\n  const api = useApiContext();\n  return useFetch<T>(url ? `${api.replace(\"2.31\", apiV)}${url}` : url, options);\n}\n\nfunction useApiLazy<T extends { result: Array<unknown> }>(\n  url?: string,\n  options?: RequestInit,\n  apiV = \"2.31\",\n  inRequest = 50\n): T {\n  const [result, setResult] = useState<T>({ result: [] } as unknown as T);\n  const [offs, setOffs] = useState(0);\n  const { data } = useApi<T>(\n    url + `?count=${inRequest}&offset=${offs}`,\n    options,\n    apiV\n  );\n\n  useEffect(() => {\n    if (!data) return;\n    setResult((prev) => ({\n      ...prev,\n      ...data,\n      result: [...prev.result, ...data.result],\n    }));\n    if (data.result.length >= inRequest) {\n      let timeout = setTimeout(() => setOffs((prev) => prev + inRequest), 2000);\n      return () => clearTimeout(timeout);\n    }\n  }, [data, inRequest]);\n\n  return result;\n}\n\nexport { useApi, useApiLazy };\nexport default useFetch;\n","import {\n  Avatar,\n  Heading,\n  HStack,\n  Progress,\n  SimpleGrid,\n  StackDivider,\n  Stat,\n  StatHelpText,\n  StatLabel,\n  StatNumber,\n  Tab,\n  Table,\n  TableCaption,\n  TableContainer,\n  TabList,\n  TabPanel,\n  TabPanels,\n  Tabs,\n  Tbody,\n  Td,\n  Text,\n  Th,\n  Thead,\n  Tr,\n  useConst,\n  VStack,\n} from \"@chakra-ui/react\";\nimport BooleanText from \"components/atoms/BooleanText\";\nimport CommentCard from \"components/scope/CommentCard\";\nimport EntryCard from \"components/scope/EntryCard\";\nimport RatingView from \"components/scope/RatingView\";\nimport { format, isValid } from \"date-fns\";\nimport { useApi, useApiLazy } from \"hooks/useFetch\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\nimport { PropsWithChildren, useMemo } from \"react\";\nimport { Bar, Radar } from \"react-chartjs-2\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { Osnova } from \"types/osnova\";\nimport { getMonths, getTargetId } from \"utils/common\";\n\nimport {\n  ChartData,\n  Chart as ChartJS,\n  CategoryScale,\n  LinearScale,\n  RadialLinearScale,\n  PointElement,\n  BarElement,\n  LineElement,\n  Filler,\n  Title,\n  Tooltip,\n  Legend,\n} from \"chart.js\";\n\nChartJS.register(\n  CategoryScale,\n  LinearScale,\n  RadialLinearScale,\n  BarElement,\n  PointElement,\n  LineElement,\n  Filler,\n  Title,\n  Tooltip,\n  Legend\n);\n\nfunction Overview({\n  subsite,\n  entries,\n  comments,\n}: {\n  subsite: Osnova.Subsite.Subsite;\n  entries?: number;\n  comments?: number;\n}) {\n  return (\n    <VStack divider={<StackDivider />}>\n      <SimpleGrid columns={4} spacing={3}>\n        <Stat>\n          <StatLabel>Постов</StatLabel>\n          <StatNumber>\n            {subsite?.counters?.entries ?? entries ?? \"N/A\"}\n          </StatNumber>\n        </Stat>\n        <Stat>\n          <StatLabel>Комментариев</StatLabel>\n          <StatNumber>\n            {subsite?.counters?.comments ?? comments ?? \"N/A\"}\n          </StatNumber>\n        </Stat>\n        <Stat>\n          <StatLabel>Подписок</StatLabel>\n          <StatNumber>{subsite?.counters?.subscriptions ?? \"N/A\"}</StatNumber>\n        </Stat>\n        <Stat>\n          <StatLabel>Подписчиков</StatLabel>\n          <StatNumber>{subsite?.counters?.subscribers ?? \"N/A\"}</StatNumber>\n        </Stat>\n      </SimpleGrid>\n\n      <SimpleGrid\n        columns={2}\n        spacing={3}\n        justifyContent=\"space-between\"\n        w=\"100%\"\n        maxW=\"418px\"\n      >\n        <Stat>\n          <StatLabel>Plus</StatLabel>\n          <StatNumber>{<BooleanText value={subsite?.isPlus} />}</StatNumber>\n        </Stat>\n        <Stat>\n          <StatLabel>Подтвержден</StatLabel>\n          <StatNumber>{<BooleanText value={subsite?.isVerified} />}</StatNumber>\n        </Stat>\n      </SimpleGrid>\n    </VStack>\n  );\n}\n\nfunction StatCat({ label, children }: PropsWithChildren<{ label: string }>) {\n  return (\n    <VStack align=\"flex-start\" minW=\"100%\">\n      <Heading size=\"md\">{label}</Heading>\n      {children}\n    </VStack>\n  );\n}\n\nfunction Entries({ data }: { data: Osnova.Entry.EntriesResponse | undefined }) {\n  const stats = useMemo(() => {\n    const result = {\n      rating: 0,\n      ratingCount: 0,\n      comments: 0,\n      reposts: 0,\n      hits: 0,\n      mostHits: (data?.result || [])[0],\n      mostLiked: (data?.result || [])[0],\n      mostDisliked: (data?.result || [])[0],\n    };\n    for (const entry of data?.result || []) {\n      result.rating += entry.likes.summ;\n      result.ratingCount += entry.likes.count;\n      result.comments += entry.commentsCount;\n      result.reposts += Number(entry.isRepost);\n      result.hits += entry.hitsCount;\n      if (entry.hitsCount > result.mostHits.hitsCount) {\n        result.mostHits = entry;\n      }\n      if (entry.likes.summ > result.mostLiked.likes.summ) {\n        result.mostLiked = entry;\n      }\n      if (\n        entry.likes.count - entry.likes.summ >\n        result.mostDisliked.likes.count - result.mostDisliked.likes.summ\n      ) {\n        result.mostDisliked = entry;\n      }\n    }\n    return result;\n  }, [data]);\n\n  return (\n    <VStack align=\"flex-start\" w=\"100%\" pl=\"2\" spacing={4}>\n      <SimpleGrid\n        columns={3}\n        spacing={1}\n        justifyContent=\"space-between\"\n        minW=\"100%\"\n      >\n        <RatingView>{stats.rating}</RatingView>\n        <RatingView label=\"Оценок\">{stats.ratingCount}</RatingView>\n        <RatingView label=\"Оценки [минус]\">\n          {stats.ratingCount - stats.rating}\n        </RatingView>\n        <Stat>\n          <StatLabel>Комментариев</StatLabel>\n          <StatNumber>{stats.comments}</StatNumber>\n        </Stat>\n        <Stat>\n          <StatLabel>Просмотров</StatLabel>\n          <StatNumber>{stats.hits}</StatNumber>\n        </Stat>\n        <Stat>\n          <StatLabel>Репостов</StatLabel>\n          <StatNumber>{stats.reposts}</StatNumber>\n        </Stat>\n      </SimpleGrid>\n\n      {stats.mostHits && (\n        <StatCat label=\"Наиболее просматриваемый\">\n          <EntryCard entry={stats.mostHits} />\n        </StatCat>\n      )}\n\n      {stats.mostLiked && (\n        <StatCat label=\"Наибольшее количество плюсов\">\n          <EntryCard entry={stats.mostLiked} />\n        </StatCat>\n      )}\n\n      {stats.mostDisliked && (\n        <StatCat label=\"Наибольшее количество минусов\">\n          <EntryCard entry={stats.mostDisliked} />\n        </StatCat>\n      )}\n    </VStack>\n  );\n}\n\nfunction Comments({\n  data,\n}: {\n  data: Osnova.Comment.CommentsResponse | undefined;\n}) {\n  const stats = useMemo(() => {\n    const result = {\n      rating: 0,\n      ratingCount: 0,\n      mostLiked: (data?.result || [])[0],\n      mostDisliked: (data?.result || [])[0],\n    };\n    for (const entry of data?.result || []) {\n      result.rating += entry.likes.summ;\n      result.ratingCount += entry.likes.count;\n      if (entry.likes.summ > result.mostLiked.likes.summ) {\n        result.mostLiked = entry;\n      }\n      if (\n        entry.likes.count - entry.likes.summ >\n        result.mostDisliked.likes.count - result.mostDisliked.likes.summ\n      ) {\n        result.mostDisliked = entry;\n      }\n    }\n    return result;\n  }, [data]);\n\n  return (\n    <VStack align=\"flex-start\" w=\"100%\" pl=\"2\" spacing={4}>\n      <SimpleGrid\n        columns={3}\n        spacing={1}\n        justifyContent=\"space-between\"\n        minW=\"100%\"\n      >\n        <RatingView>{stats.rating}</RatingView>\n        <RatingView label=\"Оценок\">{stats.ratingCount}</RatingView>\n        <RatingView label=\"Оценки [минус]\">\n          {stats.ratingCount - stats.rating}\n        </RatingView>\n      </SimpleGrid>\n\n      {stats.mostLiked && (\n        <StatCat label=\"Наибольшее количество плюсов\">\n          <CommentCard comment={stats.mostLiked} />\n        </StatCat>\n      )}\n\n      {stats.mostDisliked && (\n        <StatCat label=\"Наибольшее количество минусов\">\n          <CommentCard comment={stats.mostDisliked} />\n        </StatCat>\n      )}\n    </VStack>\n  );\n}\n\n//#region Activity\n\ninterface ActivityProps {\n  comments: Osnova.Comment.CommentsResponse;\n  entries: Osnova.Entry.EntriesResponse;\n}\n\ntype ActivityChartData = {\n  years: ChartData<\"bar\", number[], string>;\n  months: ChartData<\"bar\", number[], string>;\n  days: ChartData<\"bar\", number[], string>;\n  hours: ChartData<\"radar\", number[], string>;\n  rating: ChartData<\"bar\", number[], string>;\n};\n\ninterface ActivityChartsProps {\n  data: ActivityChartData;\n  options?: Object;\n}\n\nfunction ActivityCharts({\n  data: { years, months, days, hours, rating },\n  options,\n}: ActivityChartsProps) {\n  return (\n    <>\n      <VStack w=\"100%\">\n        <Heading size=\"md\">По годам</Heading>\n        <Bar data={years} options={options} />\n      </VStack>\n      <VStack w=\"100%\">\n        <Heading size=\"md\">По месяцам</Heading>\n        <Bar data={months} options={options} />\n      </VStack>\n      <VStack w=\"100%\">\n        <Heading size=\"md\">По дням</Heading>\n        <Bar data={days} options={options} />\n      </VStack>\n      <VStack w=\"100%\">\n        <Heading size=\"md\">По часам</Heading>\n        <Radar data={hours} options={options} />\n      </VStack>\n      <VStack w=\"100%\">\n        <Heading size=\"md\">Оценки</Heading>\n        <Bar data={rating} options={{ indexAxis: \"y\" }} />\n      </VStack>\n    </>\n  );\n}\n\nfunction Activity({ comments, entries }: ActivityProps) {\n  const options = useConst({ plugins: { legend: { display: false } } });\n  const commentDatasetOptions = useConst({\n    borderColor: \"rgb(49,130,206)\",\n    backgroundColor: \"rgba(49,130,206,0.4)\",\n    borderWidth: 1,\n  });\n  const entryDatasetOptions = useConst({\n    borderColor: \"rgb(237,137,54)\",\n    backgroundColor: \"rgba(237,137,54,0.4)\",\n    borderWidth: 1,\n  });\n  const getStats = useConst(\n    () =>\n      function getStats<\n        T extends {\n          result?: Array<{\n            date: number;\n            likes: { count: number; summ: number };\n          }>;\n        }\n      >(target: T, dsOpts = {}) {\n        const d = { 0: 0, 1: 0, 2: 0, 3: 0, 4: 0, 5: 0, 6: 0 };\n        const dd = { ...d, 7: 0, 8: 0, 9: 0, 10: 0, 11: 0 };\n        const stats: {\n          years: Record<string, number>;\n          months: Record<string, number>;\n          days: Record<string, number>;\n          hours: Record<string, number>;\n          rating: { minus: number; plus: number };\n        } = {\n          years: {},\n          months: {\n            ...dd,\n          },\n          days: { ...d },\n          hours: {\n            ...d,\n            12: 0,\n            13: 0,\n            14: 0,\n            15: 0,\n            16: 0,\n            17: 0,\n            18: 0,\n            19: 0,\n            20: 0,\n            21: 0,\n            22: 0,\n            23: 0,\n          },\n          rating: { minus: 0, plus: 0 },\n        };\n        for (const el of target?.result || []) {\n          const dt = new Date(el.date * 1000);\n          const year = dt.getUTCFullYear();\n          const month = dt.getUTCMonth();\n          const day = dt.getUTCDay();\n          const hour = dt.getUTCHours();\n          stats.years[year] = (stats.years[year] || 0) + 1;\n          stats.months[month] = (stats.months[month] || 0) + 1;\n          stats.days[day] = (stats.days[day] || 0) + 1;\n          stats.hours[hour] = (stats.hours[hour] || 0) + 1;\n          stats.rating.plus += el.likes.summ;\n          stats.rating.minus += el.likes.count - el.likes.summ;\n        }\n        return {\n          years: {\n            datasets: [\n              {\n                data: [...Object.values(stats.years)],\n                ...dsOpts,\n              },\n            ],\n            labels: [...Object.keys(stats.years)],\n          },\n          months: {\n            datasets: [{ data: [...Object.values(stats.months)], ...dsOpts }],\n            labels: [...getMonths()],\n          },\n          days: {\n            datasets: [{ data: [...Object.values(stats.days)], ...dsOpts }],\n            labels: [\"Вс\", \"Пн\", \"Вт\", \"Ср\", \"Чт\", \"Пт\", \"Сб\"],\n          },\n          hours: {\n            datasets: [{ data: [...Object.values(stats.hours)], ...dsOpts }],\n            labels: [...Object.keys(stats.hours)],\n          },\n          rating: {\n            datasets: [\n              {\n                data: [stats.rating.minus],\n                label: \"Отрицательные\",\n                backgroundColor: \"rgba(229,62,62, 0.2)\",\n                borderColor: \"rgb(229,62,62)\",\n                borderWidth: 1,\n              },\n              {\n                data: [stats.rating.plus],\n                label: \"Положительные\",\n                backgroundColor: \"rgba(72,187,120, 0.2)\",\n                borderColor: \"rgb(72,187,120)\",\n                borderWidth: 1,\n              },\n            ],\n            labels: [\"\"],\n          },\n        } as ActivityChartData;\n      }\n  );\n\n  const commentsStats = useMemo(() => {\n    return getStats(comments, commentDatasetOptions);\n  }, [comments, commentDatasetOptions, getStats]);\n\n  const entriesStats = useMemo(() => {\n    return getStats(entries, entryDatasetOptions);\n  }, [entries, entryDatasetOptions, getStats]);\n\n  return (\n    <Tabs w=\"100%\">\n      <TabList w=\"100%\">\n        <Tab>Посты</Tab>\n        <Tab>Комментарии</Tab>\n      </TabList>\n      <TabPanels w=\"100%\">\n        <TabPanel w=\"100%\">\n          <ActivityCharts data={entriesStats} options={options} />\n        </TabPanel>\n        <TabPanel w=\"100%\">\n          <ActivityCharts data={commentsStats} options={options} />\n        </TabPanel>\n      </TabPanels>\n    </Tabs>\n  );\n}\n\n//#endregion\n\n//#region Total\n\ninterface TotalProps {\n  comments: Osnova.Comment.CommentsResponse;\n}\n\nfunction ShowRatingPlusMinus({\n  source: { plus, minus },\n}: {\n  source: { plus: number; minus: number };\n}) {\n  return (\n    <HStack spacing={2}>\n      <Text fontSize=\"16px\" as=\"span\" color=\"green.300\">\n        {plus}\n      </Text>\n      <Text fontSize=\"16px\" as=\"span\" color=\"red.300\">\n        {minus}\n      </Text>\n      <Text fontSize=\"16px\" as=\"span\" color=\"gray.500\">\n        {plus + minus ?? \"N/A\"}\n      </Text>\n    </HStack>\n  );\n}\n\ninterface UserProps {\n  name: string;\n  avatar_url: string;\n  id: number | string;\n  size?: \"sm\" | \"md\";\n}\n\nfunction User({\n  name,\n  avatar_url,\n  id,\n  children,\n  size = \"md\",\n}: PropsWithChildren<UserProps>) {\n  return (\n    <HStack as=\"a\" href={`https://tjournal.ru/u/${id}`} target=\"_blank\">\n      <Avatar size={size} name={name} src={avatar_url} />\n      <Text\n        fontSize={size === \"md\" ? \"18px\" : \"14px\"}\n        as=\"b\"\n        maxW={{ base: \"150px\", md: \"180px\", lg: \"200px\" }}\n        textOverflow={\"ellipsis\"}\n        overflow=\"hidden\"\n      >\n        {name}\n      </Text>\n      {children}\n    </HStack>\n  );\n}\n\ntype Liker = { minus: number; plus: number; name: string; avatar_url: string };\ntype Likers = Record<string, Liker>;\n\nfunction TotalTable({ likers }: { likers: Likers }) {\n  return (\n    <TableContainer>\n      <Table variant=\"simple\" size={{ base: \"sm\", md: \"md\", lg: \"lg\" }}>\n        <TableCaption>Статистика оценок по пользователям</TableCaption>\n        <Thead>\n          <Tr>\n            <Th>Пользователь</Th>\n            <Th isNumeric color=\"green.300\">\n              +\n            </Th>\n            <Th isNumeric color=\"red.300\">\n              -\n            </Th>\n            <Th isNumeric>Всего</Th>\n          </Tr>\n        </Thead>\n        <Tbody>\n          {[...Object.entries(likers)]\n            .sort(([_, a], [_0, b]) => b.plus + b.minus - (a.plus + a.minus))\n            .map(([id, { name, avatar_url, minus, plus }]) => (\n              <Tr key={id}>\n                <Td>\n                  <User name={name} avatar_url={avatar_url} id={id} />\n                </Td>\n                <Td>{plus}</Td>\n                <Td>{minus}</Td>\n                <Td>{minus + plus}</Td>\n              </Tr>\n            ))}\n        </Tbody>\n      </Table>\n    </TableContainer>\n  );\n}\n\nfunction Total({ comments }: TotalProps) {\n  const [commentsLikers, setCommentsLikers] = useState<Likers>({});\n  const [commentIndex, setCommentIndex] = useState(0);\n  const { data } = useApi<Osnova.Comment.LikersResponse>(\n    `/comment/likers/${(comments?.result || [])[commentIndex]?.id}`,\n    undefined,\n    \"1.9\"\n  );\n\n  const commentStats = useMemo(() => {\n    const result = {\n      plus: { ...(commentsLikers[0] || { plus: 0 }), id: \"0\" },\n      minus: { ...(commentsLikers[0] || { minus: 0 }), id: \"0\" },\n      total: { ...(commentsLikers[0] || { plus: 0, minus: 0 }), id: \"0\" },\n    };\n\n    for (const [id, cmt] of Object.entries(commentsLikers)) {\n      if (cmt.minus > result.minus.minus) {\n        result.minus = { ...cmt, id };\n      }\n      if (cmt.plus > result.plus.plus) {\n        result.plus = { ...cmt, id };\n      }\n      if (cmt.plus + cmt.minus > result.total.plus + result.total.minus) {\n        result.total = { ...cmt, id };\n      }\n    }\n    return result;\n  }, [commentsLikers]);\n\n  useEffect(() => {\n    if (!data) return;\n    setCommentsLikers((prev) => {\n      const result = { ...prev };\n      for (const [id, val] of Object.entries(data.result)) {\n        if (!Reflect.has(result, id)) {\n          result[id] = {\n            minus: 0,\n            plus: 0,\n            avatar_url: \"\",\n            name: \"\",\n          };\n        }\n        result[id].minus += Number(val.sign < 0);\n        result[id].plus += Number(val.sign > 0);\n\n        result[id].avatar_url = val.avatar_url;\n        result[id].name = val.name;\n      }\n      return result;\n    });\n    let timeout = setTimeout(() => setCommentIndex((prev) => prev + 1), 2000);\n    return () => clearTimeout(timeout);\n  }, [data]);\n\n  return (\n    <VStack position=\"relative\">\n      {comments?.result?.length > commentIndex && (\n        <Progress size=\"xs\" isIndeterminate w=\"100%\" />\n      )}\n\n      <SimpleGrid\n        columns={{ md: 2, base: 1 }}\n        spacing={5}\n        justifyContent=\"space-between\"\n        minW=\"100%\"\n      >\n        {!!+commentStats.plus.id && (\n          <Stat>\n            <StatLabel>Больше всего плюсов</StatLabel>\n            <StatNumber>\n              <User\n                name={commentStats.plus.name}\n                avatar_url={commentStats.plus.avatar_url}\n                id={commentStats.plus.id}\n              />\n            </StatNumber>\n            <StatHelpText pl=\"14\">\n              <ShowRatingPlusMinus source={commentStats.plus} />\n            </StatHelpText>\n          </Stat>\n        )}\n        {!!+commentStats.minus.id && (\n          <Stat>\n            <StatLabel>Больше всего минусов</StatLabel>\n            <StatNumber>\n              <User\n                name={commentStats.minus.name}\n                avatar_url={commentStats.minus.avatar_url}\n                id={commentStats.minus.id}\n              />\n            </StatNumber>\n            <StatHelpText pl=\"14\">\n              <ShowRatingPlusMinus source={commentStats.minus} />\n            </StatHelpText>\n          </Stat>\n        )}\n        {!!+commentStats.total.id && (\n          <Stat>\n            <StatLabel>Больше всего оценок</StatLabel>\n            <StatNumber>\n              <User\n                name={commentStats.total.name}\n                avatar_url={commentStats.total.avatar_url}\n                id={commentStats.total.id}\n              />\n            </StatNumber>\n            <StatHelpText pl=\"14\">\n              <ShowRatingPlusMinus source={commentStats.total} />\n            </StatHelpText>\n          </Stat>\n        )}\n      </SimpleGrid>\n\n      {comments?.result?.length <= commentIndex && (\n        <TotalTable likers={commentsLikers} />\n      )}\n    </VStack>\n  );\n}\n\n//#endregion\n\nfunction Header({\n  subsite,\n  avatar_url,\n  rating,\n}: {\n  subsite: Osnova.Subsite.Subsite;\n  avatar_url?: string;\n  rating?: number;\n}) {\n  return (\n    <HStack\n      spacing={10}\n      position=\"sticky\"\n      top=\"0\"\n      bg=\"white\"\n      zIndex=\"1000\"\n      pt=\"5\"\n      pb=\"2\"\n      px=\"4\"\n    >\n      <Avatar\n        name={subsite.name}\n        size=\"2xl\"\n        src={\n          subsite?.avatar?.data?.uuid\n            ? `https://leonardo.osnova.io/${subsite?.avatar?.data?.uuid}/-/scale_crop/300x300/-/format/webp/`\n            : avatar_url\n        }\n      />\n      <VStack>\n        <Heading size=\"lg\">{subsite.name}</Heading>\n        <HStack justifyContent={\"space-between\"} minW=\"100%\">\n          <RatingView>{subsite.rating ?? rating ?? \"N/A\"}</RatingView>\n          <Stat>\n            <StatLabel>Создан</StatLabel>\n            <StatNumber>\n              {isValid(subsite.created)\n                ? format(subsite.created * 1000, \"dd.LL.yy\")\n                : \"N/A\"}\n            </StatNumber>\n          </Stat>\n        </HStack>\n      </VStack>\n    </HStack>\n  );\n}\n\nfunction Scope() {\n  const [searchParams] = useSearchParams();\n  const id = getTargetId(searchParams.get(\"id\") || \"\");\n\n  const { data, error } = useApi<Osnova.Subsite.SubsiteResponse>(\n    `/subsite?id=${id}`\n  );\n  const entries = useApiLazy<Osnova.Entry.EntriesResponse>(\n    `/user/${id}/entries`,\n    undefined,\n    \"1.9\"\n  );\n  const comments = useApiLazy<Osnova.Comment.CommentsResponse>(\n    `/user/${id}/comments`,\n    undefined,\n    \"1.9\"\n  );\n\n  const entriesRating = useMemo(\n    () => entries?.result?.reduce((p, c) => p + c.likes.summ, 0),\n    [entries]\n  );\n  const commentsRating = useMemo(\n    () => comments?.result?.reduce((p, c) => p + c.likes.summ, 0),\n    [comments]\n  );\n\n  const {\n    result: { subsite },\n  } = data || {\n    result: {\n      subsite: {\n        name:\n          comments?.result?.at(0)?.author?.name ||\n          entries?.result?.at(0)?.author?.name,\n      } as any,\n    },\n  };\n\n  return (\n    <VStack align=\"start\">\n      {error && (\n        <VStack align=\"start\">\n          <Heading>\n            Вероятно профиль закрыт{\" \"}\n            {!(comments?.result?.length || entries?.result?.length) && (\n              <>или не существует</>\n            )}\n          </Heading>\n          <Text fontSize=\"12px\" color=\"gray.500\">\n            Некоторые данные могут быть менее точны и потребуется дополнительное\n            время для подсчета\n          </Text>\n        </VStack>\n      )}\n      <Header\n        subsite={subsite}\n        avatar_url={\n          comments?.result?.at(0)?.author?.avatar_url ||\n          entries?.result?.at(0)?.author?.avatar_url\n        }\n        rating={entriesRating + commentsRating}\n      />\n\n      <Tabs variant={\"enclosed\"}>\n        <TabList>\n          <Tab>Обзор</Tab>\n          <Tab>Посты</Tab>\n          <Tab>Комментарии</Tab>\n          <Tab>Активность</Tab>\n          <Tab>Итог</Tab>\n        </TabList>\n        <TabPanels>\n          <TabPanel>\n            <Overview\n              subsite={subsite}\n              entries={entries?.result?.length}\n              comments={comments?.result?.length}\n            />\n          </TabPanel>\n          <TabPanel>\n            <VStack\n              align=\"flex-start\"\n              divider={<StackDivider />}\n              w=\"100%\"\n              maxW=\"438px\"\n            >\n              <Entries data={entries} />\n            </VStack>\n          </TabPanel>\n          <TabPanel>\n            <VStack\n              align=\"flex-start\"\n              divider={<StackDivider />}\n              w=\"100%\"\n              maxW=\"438px\"\n            >\n              <Comments data={comments} />\n            </VStack>\n          </TabPanel>\n          <TabPanel w=\"100%\" maxW=\"438px\">\n            <Activity comments={comments} entries={entries} />\n          </TabPanel>\n          <TabPanel>\n            <Total comments={comments} />\n          </TabPanel>\n        </TabPanels>\n      </Tabs>\n    </VStack>\n  );\n}\n\nexport default Scope;\n","const getTargetId = (target: string) =>\n  +(/(?:u\\/)?(\\d+)/.exec(target || \"\") || [])[1] || 0;\n\nconst getMonths = () => [\n  \"January\",\n  \"February\",\n  \"March\",\n  \"April\",\n  \"May\",\n  \"June\",\n  \"July\",\n  \"August\",\n  \"September\",\n  \"October\",\n  \"November\",\n  \"December\",\n];\n\nexport { getTargetId, getMonths };\n"],"names":["value","comment","author","avatar_url","name","date","likes","count","summ","id","url","entry","html","align","as","href","rel","target","p","shadow","borderWidth","rounded","minW","spacing","justifyContent","size","src","color","format","pl","dangerouslySetInnerHTML","__html","hitsCount","intro","cover","subsite","thumbnailUrl","alt","objectFit","pointerEvents","label","children","api","ApiContext","createContext","useApiContext","useContext","useFetch","options","cache","useRef","cancelRequest","initialState","error","undefined","data","useReducer","state","action","type","payload","dispatch","useEffect","current","fetchData","fetch","response","ok","Error","statusText","json","useApi","apiV","replace","useApiLazy","inRequest","useState","result","setResult","offs","setOffs","prev","length","timeout","setTimeout","clearTimeout","Overview","entries","comments","divider","columns","counters","subscriptions","subscribers","w","maxW","isPlus","isVerified","StatCat","Entries","stats","useMemo","rating","ratingCount","reposts","hits","mostHits","mostLiked","mostDisliked","commentsCount","Number","isRepost","Comments","ActivityCharts","years","months","days","hours","indexAxis","Activity","useConst","plugins","legend","display","commentDatasetOptions","borderColor","backgroundColor","entryDatasetOptions","getStats","dsOpts","d","dd","minus","plus","el","dt","Date","year","getUTCFullYear","month","getUTCMonth","day","getUTCDay","hour","getUTCHours","datasets","Object","values","labels","keys","getMonths","commentsStats","entriesStats","ShowRatingPlusMinus","source","fontSize","User","base","md","lg","textOverflow","overflow","TotalTable","likers","variant","Tr","Th","isNumeric","sort","a","b","map","Td","Total","commentsLikers","setCommentsLikers","commentIndex","setCommentIndex","commentStats","total","cmt","val","Reflect","has","sign","position","isIndeterminate","Header","top","bg","zIndex","pt","pb","px","avatar","uuid","isValid","created","ChartJS","CategoryScale","LinearScale","RadialLinearScale","BarElement","PointElement","LineElement","Filler","Title","Tooltip","Legend","useSearchParams","searchParams","getTargetId","get","entriesRating","reduce","c","commentsRating","at","exec"],"sourceRoot":""}